(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function i(s){if(s.ep)return;s.ep=!0;const a=t(s);fetch(s.href,a)}})();function d(n){return n?n.split("-").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(" "):""}function k(n){return(n/10).toFixed(1)}const w=new Map;async function m(n,e,t){const i=`${e}:${t}`;if(w.has(i))return w.get(i);try{const s=await n(`${e}/${t}`),a=s.names?.find(o=>o.language.name==="es")?.name||s.effect_entries?.find(o=>o.language.name==="es")?.effect||d(t);return w.set(i,a),a}catch(s){return console.warn(`No se pudo obtener traducción para ${t}`,s),d(t)}}function $(n){return{walk:"Caminando",surf:"Surfeando",fishing:"Pescando",headbutt:"Cabezazo","rock-smash":"Rompe Rocas",gift:"Regalo","gift-egg":"Huevo Regalo","level-up":"Nivel",trade:"Intercambio","use-item":"Usar Objeto",shed:"Mudar",egg:"Huevo"}[n]||d(n)}class E{constructor(e){if(!e||!e.id)throw new Error("Invalid Pokemon data");this.data=e,this.id=e.id,this.name=e.name,this.types=e.types||[],this.stats=e.stats||[],this.abilities=e.abilities||[],this.moves=e.moves||[],this.sprites=e.sprites||{},this.height=e.height||0,this.weight=e.weight||0,this.base_experience=e.base_experience,this.species=e.species}getSpeciesUrl(){return this.species?.url||null}getEncountersUrl(){return`https://pokeapi.co/api/v2/pokemon/${this.id}/encounters`}getStructuredView(){return{id:this.id,name:this.name,number:String(this.id).padStart(3,"0"),types:this.types.map(e=>({name:e.type.name,url:e.type.url})),sprites:{main:this.getMainSprite(),default:this.sprites.front_default,shiny:this.sprites.front_shiny,artwork:this.sprites.other?.["official-artwork"]?.front_default,dream_world:this.sprites.other?.dream_world?.front_default},stats:this.stats.reduce((e,t)=>(e[t.stat.name]={base:t.base_stat,effort:t.effort,name:t.stat.name},e),{}),height:this.height/10,weight:this.weight/10,abilities:this.abilities.map(e=>({name:e.ability.name,url:e.ability.url,is_hidden:e.is_hidden,slot:e.slot})),moves:this.moves.map(e=>({name:e.move.name,url:e.move.url,learn_methods:e.version_group_details.map(t=>({method:t.move_learn_method.name,version:t.version_group.name,level:t.level_learned_at}))})),base_experience:this.base_experience,species_url:this.getSpeciesUrl(),encounters_url:this.getEncountersUrl()}}getMainSprite(){return this.data.sprites.other["official-artwork"]?.front_default||this.data.sprites.other.dream_world?.front_default||this.data.sprites.front_default}getAllSprites(){const e={};for(const[t,i]of Object.entries(this.data.sprites))if(typeof i=="string"&&i)e[t]=i;else if(i&&typeof i=="object")for(const[s,a]of Object.entries(i))typeof a=="string"&&a&&(e[`${t}.${s}`]=a);return e}getStats(){return this.stats.map(e=>({name:e.stat.name,value:e.base_stat,max:255}))}getFormattedId(){return`#${String(this.id).padStart(3,"0")}`}getFormattedName(){return d(this.name)}getBasicInfo(){const e=k(this.height),t=k(this.weight);return`${e}m, ${t}kg`}}class L{constructor(e,t){this.view=e,this.service=t,this.state={currentPokemon:null,allPokemon:[],searchResults:[],acIndex:-1}}async initialize(){await this.loadAllPokemon(),this.setupEventListeners(),await this.loadPokemon(1)}async loadAllPokemon(){try{const e=localStorage.getItem("pokedex_all_pokemon_v1");if(e){this.state.allPokemon=JSON.parse(e);return}const t=await this.service.get("pokemon?limit=2000");if(t&&t.results){this.state.allPokemon=t.results.map(i=>({name:i.name,url:i.url}));try{localStorage.setItem("pokedex_all_pokemon_v1",JSON.stringify(this.state.allPokemon))}catch(i){console.warn("Could not save to localStorage:",i)}}}catch(e){console.error("Error loading all pokemon:",e)}}setupEventListeners(){const e=document.getElementById("search-input"),t=document.getElementById("search-btn");document.getElementById("autocomplete"),e&&(e.addEventListener("input",s=>this.handleSearch(s.target.value)),e.addEventListener("keydown",s=>this.handleSearchKeydown(s))),t&&t.addEventListener("click",()=>{const s=e?.value.trim();s&&this.loadPokemon(s)});const i=document.getElementById("random-pokemon");i&&i.addEventListener("click",()=>{const s=Math.floor(Math.random()*898)+1;this.loadPokemon(s)})}async loadPokemon(e){if(!e){console.error("Invalid identifier provided");return}try{console.log("Loading pokemon:",e);const t=e.toString().toLowerCase().trim(),i=await this.service.get(`pokemon/${t}`);if(console.log("Pokemon data received:",i),!i||!i.id)throw new Error("Invalid data received from API");this.state.currentPokemon=new E(i),this.view.updateView(this.state.currentPokemon)}catch(t){console.error("Error loading pokemon:",t),alert("No se pudo cargar el Pokémon. Verifica el nombre o ID.")}}handleSearch(e){const t=document.getElementById("autocomplete");if(!t)return;if(!e){t.style.display="none",t.setAttribute("aria-hidden","true");return}const i=this.state.allPokemon.filter(s=>s.name.includes(e.toLowerCase())).slice(0,12);if(i.length===0){t.style.display="none",t.setAttribute("aria-hidden","true");return}t.innerHTML=i.map((s,a)=>`
            <div class="item" data-name="${s.name}">
                ${s.name}
            </div>
        `).join(""),t.style.display="block",t.setAttribute("aria-hidden","false"),this.state.acIndex=-1,t.querySelectorAll(".item").forEach(s=>{s.addEventListener("click",()=>{const a=document.getElementById("search-input");a&&(a.value=s.dataset.name),t.style.display="none",this.loadPokemon(s.dataset.name)})})}handleSearchKeydown(e){const t=document.getElementById("autocomplete");if(!t||t.style.display==="none")return;const i=Array.from(t.querySelectorAll(".item"));switch(e.key){case"ArrowDown":e.preventDefault(),this.state.acIndex=Math.min(i.length-1,this.state.acIndex+1),this.updateAutocompleteSelection(i);break;case"ArrowUp":e.preventDefault(),this.state.acIndex=Math.max(0,this.state.acIndex-1),this.updateAutocompleteSelection(i);break;case"Enter":if(e.preventDefault(),this.state.acIndex>=0&&i[this.state.acIndex]){const s=i[this.state.acIndex].dataset.name,a=document.getElementById("search-input");a&&(a.value=s),t.style.display="none",this.loadPokemon(s)}else{const a=document.getElementById("search-input")?.value.trim();a&&this.loadPokemon(a)}break;case"Escape":t.style.display="none";break}}updateAutocompleteSelection(e){e.forEach(t=>t.classList.remove("active")),e[this.state.acIndex]&&e[this.state.acIndex].classList.add("active")}}class x{constructor(e){this.service=e,this.setupElements()}setupElements(){this.elements={name:document.getElementById("pokemon-name"),id:document.getElementById("pokemon-id"),mainSprite:document.getElementById("main-sprite"),types:document.getElementById("pokemon-badges"),basicInfo:document.getElementById("pokemon-basic"),spriteList:document.getElementById("sprite-list"),stats:document.getElementById("stats-abilities"),moves:document.getElementById("moves"),speciesCard:document.getElementById("species-card"),encounters:document.getElementById("encounters"),rawJson:document.getElementById("raw-json")}}async updateView(e){e&&(this.currentPokemon=e,console.log("Updating view with pokemon:",e),this.elements.name.textContent=e.getFormattedName(),this.elements.id.textContent=e.getFormattedId(),this.elements.mainSprite.innerHTML=`
            <img src="${e.getMainSprite()}" alt="${e.getFormattedName()}" />
        `,await this.renderTypes(e),this.renderBasicInfo(e),this.renderSprites(e),await this.renderStats(e),await this.renderMoves(e),this.loadSpecies(e),this.loadEncounters(e),this.showRaw(e))}showRaw(e){!this.elements.rawJson||!e||(this.elements.rawJson.innerHTML=this.createStructuredView(e))}createStructuredView(e){let t='<div class="info-card">';return e.id&&e.name&&(t+=`
                <div class="info-title">${d(e.name)} #${e.id}</div>
                <div class="info-grid">`,e.height&&(t+=this.createInfoRow("Altura",`${(e.height/10).toFixed(1)}m`)),e.weight&&(t+=this.createInfoRow("Peso",`${(e.weight/10).toFixed(1)}kg`)),e.base_experience&&(t+=this.createInfoRow("Exp. Base",e.base_experience)),e.order&&(t+=this.createInfoRow("Orden",`#${e.order}`)),t+="</div></div>"),t}createInfoRow(e,t){return`
            <div class="info-label">${e}</div>
            <div class="info-value">${t}</div>
        `}async loadSpecies(e){const t=e.getSpeciesUrl();if(!(!t||!this.elements.speciesCard))try{const i=await this.service.get(t),s=i.flavor_text_entries?.find(c=>c.language.name==="es")||i.flavor_text_entries?.find(c=>c.language.name==="en")||i.flavor_text_entries?.[0],a=i.color?d(await m(this.service.get.bind(this.service),"pokemon-color",i.color.name)):"",o=i.habitat?d(await m(this.service.get.bind(this.service),"pokemon-habitat",i.habitat.name)):"",l=i.shape?d(await m(this.service.get.bind(this.service),"pokemon-shape",i.shape.name)):"",f=i.growth_rate?d(await m(this.service.get.bind(this.service),"growth-rate",i.growth_rate.name)):"";let p=`
            <div class="species-info">
                <div class="info-title">Información de Especie</div>
                
                <div class="info-grid">
                    ${i.color?`<div class="info-label">Color</div><div class="info-value">${a}</div>`:""}
                    ${i.habitat?`<div class="info-label">Hábitat</div><div class="info-value">${o}</div>`:""}
                    ${i.shape?`<div class="info-label">Forma</div><div class="info-value">${l}</div>`:""}
                    ${i.growth_rate?`<div class="info-label">Crecimiento</div><div class="info-value">${f}</div>`:""}
                </div>

                ${s?`
                    <div class="flavor-text">
                        ${s.flavor_text.replace(/\n|\f/g," ")}
                    </div>
                `:""}`;if(i.genera&&i.genera.length>0){const c=i.genera.find(h=>h.language.name==="es")?.genus||i.genera.find(h=>h.language.name==="en")?.genus;c&&(p+=`
                        <div class="info-card">
                            <div class="info-value" style="font-style:italic">${c}</div>
                        </div>`)}if(p+="</div>",this.elements.speciesCard.innerHTML=p,i.evolution_chain?.url){const c=await this.service.get(i.evolution_chain.url);this.renderEvolutionChain(c)}}catch(i){console.warn("Error loading species:",i),this.elements.speciesCard&&(this.elements.speciesCard.innerHTML=`
                    <div class="info-card">
                        <div class="info-title">Error</div>
                        <div class="info-value">No se pudo cargar la información de especie</div>
                    </div>`)}}async loadEncounters(e){const t=e.getEncountersUrl();if(!(!t||!this.elements.encounters))try{const i=await this.service.get(t);if(!i||i.length===0){this.elements.encounters.innerHTML=`
                    <div class="info-card">
                        <div class="info-title">Sin encuentros</div>
                        <div class="info-value">Este Pokémon no se encuentra en estado salvaje.</div>
                    </div>`;return}const s=await Promise.all(i.map(async a=>{try{const o=await this.getLocationName(a.location_area.url),l=new Map;a.version_details.forEach(p=>{p.encounter_details.forEach(c=>{const h=c.method.name;l.has(h)||l.set(h,{levels:new Set,chances:new Set,conditions:new Set});const v=l.get(h);v.levels.add(c.min_level===c.max_level?c.min_level:`${c.min_level}-${c.max_level}`),v.chances.add(c.chance),c.condition_values&&c.condition_values.forEach(g=>v.conditions.add(g.name))})});const f=await Promise.all(Array.from(l.entries()).map(async([p,c])=>{let h="";return c.conditions.size>0&&(h=`<div class="location-detail encounter-condition"><strong>${(await Promise.all(Array.from(c.conditions).map(async g=>await m(this.service.get.bind(this.service),"encounter-condition-value",g)))).join(", ")}</strong></div>`),`
                            <div class="location-detail encounter-method">
                                ${$(p)}
                            </div>
                            <div class="location-detail encounter-level">
                                Nv. <strong>${Array.from(c.levels).join(", ")}</strong>
                            </div>
                            <div class="location-detail encounter-chance">
                                <strong>${Array.from(c.chances).reduce((v,g)=>v+g,0)}%</strong> prob.
                            </div>
                            ${h}
                        `}));return`
                        <div class="location-card">
                            <div class="location-name">${o}</div>
                            <div class="location-details">
                                ${f.join("")}
                            </div>
                        </div>
                    `}catch(o){return console.warn("Error processing location:",o),`
                        <div class="location-card">
                            <div class="location-name">Error al cargar ubicación</div>
                        </div>
                    `}}));this.elements.encounters.innerHTML=s.join("")}catch(i){console.warn("Error loading encounters:",i),this.elements.encounters.innerHTML=`
                <div class="info-card">
                    <div class="info-value">Error al cargar encuentros</div>
                </div>`}}async getLocationName(e){try{const t=await this.service.get(e);return t.names?.find(i=>i.language.name==="es")?.name||d(t.name)}catch(t){return console.warn("Error getting location name:",t),"Ubicación desconocida"}}renderEvolutionChain(e){if(!this.elements.speciesCard)return;const t=document.createElement("div");t.style.marginTop="8px",t.innerHTML='<div style="font-weight:700;color:var(--accent);margin-top:8px">Cadena de Evolución</div>';const i=[];function s(a,o=0){i.push({name:a.species.name,url:a.species.url,depth:o}),a.evolves_to.forEach(l=>s(l,o+1))}s(e.chain),t.innerHTML+=i.map(a=>`
            <button class="badge" style="margin:6px" data-url="${a.url}">
                ${d(a.name)}
            </button>
        `).join(""),this.elements.speciesCard.appendChild(t),t.querySelectorAll("button[data-url]").forEach(a=>{a.addEventListener("click",async()=>{try{const o=await this.service.get(a.dataset.url);if(o.varieties&&o.varieties[0]?.pokemon){const l=await this.service.get(o.varieties[0].pokemon.url),f=new E(l);this.updateView(f)}}catch(o){console.error("Error loading evolution:",o)}})})}async renderTypes(e){if(!this.elements.types)return;const t=await Promise.all(e.types.map(async i=>{const s=await m(this.service.get.bind(this.service),"type",i.type.name);return`<button class="badge type-${i.type.name}" data-url="${i.type.url}">${s}</button>`}));this.elements.types.innerHTML=t.join("")}renderBasicInfo(e){this.elements.basicInfo&&(this.elements.basicInfo.textContent=e.getBasicInfo())}renderSprites(e){if(!this.elements.spriteList)return;const t=e.getAllSprites();this.elements.spriteList.innerHTML=`
            <div class="thumbs">
                ${Object.entries(t).map(([i,s])=>`
                    <img src="${s}" 
                         alt="${i}" 
                         title="${i}"
                         loading="lazy"
                         data-sprite="${i}" />
                `).join("")}
            </div>
        `,this.elements.spriteList.querySelectorAll("img").forEach(i=>{i.addEventListener("click",()=>{const s=this.elements.mainSprite.querySelector("img");s&&(s.src=i.src)})})}async renderStats(e){if(!this.elements.stats)return;const t=a=>({hp:"stat-hp",attack:"stat-attack",defense:"stat-defense","special-attack":"stat-sp-attack","special-defense":"stat-sp-defense",speed:"stat-speed"})[a]||"",i=await Promise.all(e.getStats().map(async a=>`<div class="stat-row">
                    <div class="stat-name">${await m(this.service.get.bind(this.service),"stat",a.name)}</div>
                    <div class="stat-bar">
                        <div class="stat-fill ${t(a.name)}" 
                             style="width:${Math.min(100,a.value/a.max*100)}%">
                            ${a.value}
                        </div>
                    </div>
                </div>`)),s=await Promise.all(e.abilities.map(async a=>{const o=await m(this.service.get.bind(this.service),"ability",a.ability.name);return`<button class="badge" 
                        data-url="${a.ability.url}" 
                        title="${a.is_hidden?"Habilidad oculta":""}">
                    ${o}${a.is_hidden?" (H)":""}
                </button>`}));this.elements.stats.innerHTML=`
            <div class="abilities">${s.join("")}</div>
            <div class="stats">${i.join("")}</div>
        `}async renderMoves(e){if(!this.elements.moves)return;const t=await Promise.all(e.moves.slice(0,12).map(async i=>{const s=await m(this.service.get.bind(this.service),"move",i.move.name);return`<div class="move" data-url="${i.move.url}">${s}</div>`}));this.elements.moves.innerHTML=`<div class="moves">${t.join("")}</div>`}}class u{static BASE_URL="https://pokeapi.co/api/v2";static cache=new Map;static async get(e){const t=e.startsWith("http")?e:`${this.BASE_URL}/${e.replace(/^\//,"")}`;if(this.cache.has(t))return this.cache.get(t);try{const i=await fetch(t);if(!i.ok)throw new Error(`HTTP error! status: ${i.status}`);const s=await i.json();return this.cache.set(t,s),s}catch(i){throw console.error("Error fetching from PokeAPI:",i),i}}static clearCache(){this.cache.clear()}}class I{constructor(e,t){this.container=e,this.onSelect=t,this.currentPage=0,this.limit=20,this.total=0,this.data=[]}async loadPage(e=0){this.currentPage=e;const t=e*this.limit,i=await u.get(`pokemon?limit=${this.limit}&offset=${t}`);this.total=i.count,this.data=i.results,await this.render()}async render(){if(!this.container)return;const e=await Promise.all(this.data.map(async t=>{const i=await u.get(t.url);return{name:d(i.name),id:i.id,sprite:i.sprites?.front_default,types:i.types.map(s=>d(s.type.name)).join(", "),exp:i.base_experience}}));this.container.innerHTML=`
            <div class="pokemon-list">
                ${e.map(t=>`
                    <div class="pokemon-list-item" data-id="${t.id}">
                        <img src="${t.sprite}" alt="${t.name}" />
                        <div class="poke-list-info">
                            <div><strong>${t.name}</strong> #${t.id}</div>
                            <div>Tipo: ${t.types}</div>
                            <div>Exp: ${t.exp}</div>
                        </div>
                        <button class="poke-list-view-btn" data-id="${t.id}">Ver</button>
                    </div>
                `).join("")}
            </div>
            <div class="pagination">
                <button id="prev-page" ${this.currentPage===0?"disabled":""}>Anterior</button>
                <span>Página ${this.currentPage+1} de ${Math.ceil(this.total/this.limit)}</span>
                <button id="next-page" ${(this.currentPage+1)*this.limit>=this.total?"disabled":""}>Siguiente</button>
            </div>
        `,this.container.querySelectorAll(".poke-list-view-btn").forEach(t=>{t.addEventListener("click",i=>{i.stopPropagation();const s=t.getAttribute("data-id");this.onSelect&&this.onSelect(s)})}),this.container.querySelectorAll(".pokemon-list-item").forEach(t=>{t.addEventListener("click",i=>{if(i.target.classList.contains("poke-list-view-btn"))return;const s=t.getAttribute("data-id");this.onSelect&&this.onSelect(s)})}),this.container.querySelector("#prev-page")?.addEventListener("click",()=>{this.currentPage>0&&this.loadPage(this.currentPage-1)}),this.container.querySelector("#next-page")?.addEventListener("click",()=>{(this.currentPage+1)*this.limit<this.total&&this.loadPage(this.currentPage+1)})}}const r=n=>document.getElementById(n),P=["pokemon","ability","type","move","item","egg-group","pokemon-species","evolution-chain","location","location-area","machine","characteristic","stat","language","generation","version","version-group","item-attribute","item-category","pokemon-habitat","pal-park-area"];let y;function S(){r("resource-select").innerHTML=P.map(n=>`<option value="${n}">${n}</option>`).join(""),r("fetch-btn")?.addEventListener("click",async()=>{const n=r("resource-select").value,e=r("resource-id").value.trim(),t=r("main-panel"),i=r("pokemon-list-view");t&&(t.style.display=window.innerWidth<700?"":"grid"),i&&(i.style.display="none");const s=r("back-to-list");s&&(s.style.display="none");try{const a=e?`${n}/${e}`:n,o=await u.get(a);if(n==="pokemon"&&y.loadPokemon(e),n==="pokemon-species"&&o.evolution_chain){const l=await u.get(o.evolution_chain.url)}}catch{alert("Error al obtener el recurso.")}}),r("list-btn")?.addEventListener("click",async()=>{const n=r("main-panel"),e=r("pokemon-list-view"),t=r("back-to-list");e&&(n.style.display="none",e.style.display="block",t&&(t.style.display="none"),window.pokemonListView||(window.pokemonListView=new I(e,async i=>{e.style.display="none",window.innerWidth<700?n.style.display="":n.style.display="grid";const s=r("back-to-list");s&&(s.style.display="block"),await y.loadPokemon(i)})),window.pokemonListView.loadPage(0))}),r("first-151")?.addEventListener("click",async()=>{try{const n=await u.get("pokemon?limit=151&offset=0");b(n,"pokemon")}catch(n){alert("Error al listar Pokémon: "+n.message)}})}function b(n,e){const i=(n.results||[]).map(o=>`
        <div style="display:flex;justify-content:space-between;align-items:center;padding:6px 0;border-bottom:1px solid rgba(255,255,255,0.02)">
            <div>${o.name}</div>
            <div><button class="badge" data-url="${o.url}">Abrir</button></div>
        </div>
    `).join(""),s=`
        <div style="margin-top:8px">
            ${n.previous?'<button id="prev-btn" class="badge">Anterior</button>':""}
            ${n.next?'<button id="next-btn" class="badge">Siguiente</button>':""}
        </div>
    `,a=r("raw-json");a&&(a.innerHTML=i+s,a.querySelectorAll("button[data-url]").forEach(o=>{o.addEventListener("click",async()=>{try{const l=await u.get(o.dataset.url);l.sprites&&y.loadPokemon(l.id)}catch(l){console.error("Error loading resource:",l)}})}),n.next&&r("next-btn")?.addEventListener("click",async()=>{try{const o=await u.get(n.next);b(o,e)}catch(o){console.error("Error loading next page:",o)}}),n.previous&&r("prev-btn")?.addEventListener("click",async()=>{try{const o=await u.get(n.previous);b(o,e)}catch(o){console.error("Error loading previous page:",o)}}))}document.addEventListener("DOMContentLoaded",async()=>{const n=new x(u),e=new L(n,u);y=e,S(),window.addEventListener("keydown",t=>{t.ctrlKey&&t.shiftKey&&t.key.toLowerCase()==="c"&&(u.clearCache(),localStorage.clear(),alert("Cache limpiado"))}),await e.initialize()});function _(n){const e=r("autocomplete");if(e.innerHTML="",!n){e.style.display="none",e.setAttribute("aria-hidden","true");return}const t=n.toLowerCase(),i=allPokemon.filter(s=>s.name.includes(t)).slice(0,12);if(i.length===0){e.style.display="none",e.setAttribute("aria-hidden","true");return}i.forEach((s,a)=>{const o=document.createElement("div");o.className="item",o.textContent=s.name,o.dataset.name=s.name,o.addEventListener("click",()=>{r("search-input").value=s.name,e.style.display="none",loadPokemon(s.name)}),e.appendChild(o)}),e.style.display="block",e.setAttribute("aria-hidden","false"),acIndex=-1}r("search-input").addEventListener("input",n=>_(n.target.value));r("search-input").addEventListener("keydown",n=>{const e=r("autocomplete");if(e.style.display==="none")return;const t=Array.from(e.querySelectorAll(".item"));if(n.key==="ArrowDown")n.preventDefault(),acIndex=Math.min(t.length-1,acIndex+1),t.forEach(i=>i.classList.remove("active")),t[acIndex]&&t[acIndex].classList.add("active");else if(n.key==="ArrowUp")n.preventDefault(),acIndex=Math.max(0,acIndex-1),t.forEach(i=>i.classList.remove("active")),t[acIndex]&&t[acIndex].classList.add("active");else if(n.key==="Enter")if(n.preventDefault(),acIndex>=0&&t[acIndex]){const i=t[acIndex].dataset.name;r("search-input").value=i,e.style.display="none",loadPokemon(i)}else{const i=r("search-input").value.trim();i&&loadPokemon(i)}else n.key==="Escape"&&(e.style.display="none")});r("search-btn").addEventListener("click",()=>{const n=r("search-input").value.trim(),e=r("main-panel"),t=r("pokemon-list-view");e&&(e.style.display=window.innerWidth<700?"":"grid"),t&&(t.style.display="none");const i=r("back-to-list");i&&(i.style.display="none"),n&&loadPokemon(n)});r("fetch-btn").addEventListener("click",()=>{const n=r("resource-select").value,e=r("resource-id").value.trim();if(!e){confirm("No id proporcionado. ¿Desea obtener la lista raíz? (Use List para paginar)")&&fetchResource(n,"");return}fetchResource(n,e)});r("list-btn").addEventListener("click",()=>listResource(r("resource-select").value));r("random-pokemon").addEventListener("click",()=>{const n=Math.floor(Math.random()*1118)+1,e=r("main-panel"),t=r("pokemon-list-view");e&&(e.style.display=window.innerWidth<700?"":"grid"),t&&(t.style.display="none");const i=r("back-to-list");i&&(i.style.display="none"),loadPokemon(n)});r("first-151").addEventListener("click",()=>listResource("pokemon","pokemon?limit=151&offset=0"));r("raw-fetch").addEventListener("click",()=>{const n=r("raw-path").value.trim();if(!n)return alert("Ingrese una ruta");apiGet(n).then(e=>void 0).catch(e=>alert("Fetch failed: "+e.message))});r("raw-json-toggle").addEventListener("click",()=>{const n=r("raw-json-toggle");isJsonView=!isJsonView,n.querySelector(".btn-text").textContent=isJsonView?"Ver Estructurado":"Ver JSON",n.querySelector(".btn-icon").textContent=isJsonView?"📋":"📝",JSON.parse(r("raw-json").querySelector("pre")?.textContent||"{}")});window.addEventListener("keydown",n=>{n.ctrlKey&&n.shiftKey&&n.key.toLowerCase()==="c"&&(clearCache(),alert("Cache cleared"))});loadPokemon(1);
